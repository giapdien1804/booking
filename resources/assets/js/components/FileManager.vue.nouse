<!--suppress CommaExpressionJS, JSUnusedGlobalSymbols, JSUnnecessarySemicolon -->
<template>
    <div :class="{'modal is-active':pickFile}">
        <div :class="{'modal-background':pickFile}"></div>
        <div :class="{'modal-content column is-12':pickFile}">
            <div class="card card-fmg">
                <header class="card-header">
                    <p class="card-header-title">Kho dữ liệu - máy chủ Asia</p>
                    <div class="card-header-icon p-0 mr-3">
                        <div class="select">
                            <select v-model="imageModel" title="Chế độ xem">
                                <option value="active">Chế độ hình ảnh</option>
                                <option value="inactive">Chế độ quản lý</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-header-icon p-0 mr-3">
                        <div class="tags">
                            <span v-for="col in 6" v-text="col"
                                  :class="{'tag':true,'is-primary':perRow===col}"
                                  @click="perRow=col">
                            </span>
                        </div>
                    </div>
                    <div class="card-header-icon p-0 mr-3" v-show="!imageModel">
                        <nav class="breadcrumb" aria-label="breadcrumbs">
                            <ul>
                                <li>
                                    <a href="" @click.prevent="expLoadItem({hash:''}); inTrash=false">
                                        <i class="fa fa-home fa-2x"></i></a></li>
                                <li v-for="item in expData.bread">
                                    <a href="" @click.prevent="expLoadItem(item); inTrash=false"
                                       v-text="item.item_title"></a></li>
                            </ul>
                        </nav>
                    </div>
                    <div class="card-header-icon p-0" v-if="!inTrash">
                        <div class="field has-addons">
                            <p class="control" v-if="showBtn.upload">
                                <button type="button" class="button is-primary tooltip is-tooltip-bottom"
                                        data-tooltip="Tải lên"
                                        @click="rightNavUpload">
                                    <span class="icon"><i class="fa fa-upload"></i></span>
                                </button>
                            </p>
                            <p class="control" v-if="showBtn.add_new && !imageModel">
                                <button type="button" class="button is-info tooltip is-tooltip-bottom"
                                        data-tooltip="Thêm cặp mới(nhấn phím Insert)"
                                        @click="modal.show = true">
                                    <span class="icon is-small"><i class="fa fa-folder"></i></span>
                                </button>
                            </p>
                            <p class="control">
                                <button type="button" class="button is-success tooltip is-tooltip-bottom"
                                        data-tooltip="Hiển thị/Ẩn bộ lọc dữ liệu"
                                        @click="rightNavFilter">
                                    <span class="icon is-small"><i class="fa fa-filter"></i></span>
                                </button>
                            </p>
                        </div>
                    </div>
                    <div class="card-header-icon p-0 ml-2">
                        <button type="button"
                                @click="rightNavTrash"
                                class="button is-light tooltip is-tooltip-bottom" data-tooltip="Xem dữ liệu đã xóa">
                            <span class="icon is-small"><i class="fa fa-trash"></i></span>
                        </button>
                    </div>
                    <div class="card-header-icon p-0 pr-2 ml-2">
                        <div class="field has-addons">
                            <p class="control">
                                <input class="input" type="text" placeholder="Search name...">
                            </p>
                            <p class="control">
                                <button class="button is-primary tooltip is-tooltip-bottom"
                                        data-tooltip="Search"
                                        type="button">
                                    <span class="icon"><i class="fa fa-search"></i> </span>
                                </button>
                            </p>
                        </div>
                    </div>
                    <div class="card-header-icon p-0 pr-2 ml-2" v-if="pickFile">
                        <button class="button is-dark" type="button" @click="close()">
                            <span class="icon"><i class="fa fa-close"></i> </span>
                        </button>
                    </div>
                </header>
                <div class="has-relative">
                    <div class="fmg-top-box">
                        <!--Upload form-->11010
                        <div class="field fmg-upload bg-white" style="height: 0; overflow: hidden"
                             v-show="formUpload.show">
                            <div class="has-relative fmg-upload-content">
                                <div class="columns is-multiline" v-if="formUpload.isFile">
                                    <div class="column" v-for="(value,index) in formUpload.data">
                                        <div class="thum">
                                            <img class="image is-128x128" v-if="value.type.includes('image')"
                                                 :src="imageViewSrc(value)">
                                            <div class="file-view" v-else>
                                                <span class="icon is-large"><i class="fa fa-file"></i></span>
                                            </div>
                                        </div>
                                        <div class="fmg-desc">
                                <span class="tag is-rounded is-info">
                                    {{value.type}}
                                    <button class="delete is-small" @click="deleteThumbnail(index)"
                                            v-if="!formUpload.begin_upload"></button>
                                </span>
                                            <p><span v-text="value.name"></span></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <template v-if="formUpload.show">
                                <div class="file" v-if="!formUpload.begin_upload">
                                    <label class="file-label">
                                        <input @change="previewThumbnail" class="file-input" type="file"
                                               ref="file_input"
                                               multiple>
                                        <span class="file-cta"><span class="file-icon"><i
                                                class="fa fa-upload"></i></span><span
                                                class="file-label">Thêm file tải lên..</span></span>
                                    </label>
                                </div>
                                <div class="field is-grouped">
                                    <p class="control">
                                        <button type="button" :class="formUpload.do_upload.css_class" @click="doUpload"
                                                v-if="showBtn.do_upload">
                                            <span>{{formUpload.do_upload.text}}</span>
                                        </button>
                                    </p>
                                    <p class="control">
                                        <button type="button" class="button is-danger" @click="delUpload"
                                                v-if="showBtn.del_upload">Delete all
                                        </button>
                                    </p>
                                    <p class="control">
                                        <button type="button" class="button is-danger" @click="cancelUpload"
                                                v-if="formUpload.begin_upload">Cancel
                                        </button>
                                    </p>
                                    <p class="control is-expanded has-text-right">
                                        <em>Location: <span
                                                v-text="typeof current.item_title !=='undefined'?current.item_title:'Root'"></span>
                                        </em>
                                        <button type="button" class="button is-small is-text"
                                                @click="formUpload.show = false">
                                            Thoát
                                        </button>
                                    </p>
                                </div>
                                <progress v-if="formUpload.begin_upload" class="progress is-primary mt-3"
                                          :value="formUpload.percentCompleted" max="100">
                                    {{formUpload.percentCompleted}}%
                                </progress>
                                <template v-if="formUpload.info !==''">
                                    <div class="has-text-centered" v-html="formUpload.info"></div>
                                </template>
                            </template>

                        </div>
                        <!--filter-->
                        <transition>
                            <div class="box p-2 bg-dark" v-if="filter.show">
                                <div class="field is-grouped">
                                    <div class="control">
                                        <label class="label is-small" for="input-filter-file-type">File type</label>
                                        <input id="input-filter-file-type" class="input is-small"
                                               v-model="filter.data.file_type"/>
                                    </div>
                                    <div class="control">
                                        <label class="label is-small"
                                               for="input-filter-file-ext">File extensions</label>
                                        <input id="input-filter-file-ext" class="input is-small"
                                               v-model="filter.data.file_ext"/>
                                    </div>
                                    <div class="control">
                                        <label class="label is-small">Size</label>
                                        <slider width="400px"
                                                :min="0"
                                                :max="fileSizeValue(maxSize)"
                                                :formatter="`{value} ${fileSizeType(maxSize)}`"
                                                v-model="filter.data.size"></slider>
                                    </div>
                                    <div class="control is-expanded">
                                        <label class="label is-small">Date</label>
                                        <datepicker placeholder="Date range"
                                                    v-model="filter.data.date_range"
                                                    :inputClass="['is-fullwidth','is-small']"
                                                    :config="filterDateConfig"></datepicker>
                                    </div>
                                    <div class="control">
                                        <label class="label is-small">User</label>
                                        <div class="select is-small">
                                            <select v-model="filter.data.user_id">
                                                <option value="">All</option>
                                                <option v-for="(email,user_id) in users" :value="user_id"
                                                        v-text="email"></option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="control pt-3">
                                        <button type="button" class="button is-success" @click="rightNavDoFilter">Filter
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </transition>
                    </div>

                </div>
                <div class="card-content p-2 has-relative no-overflow global-fmg-content">
                    <!--Loop item EXP-->
                    <div class="columns mt-0">
                        <div class="column">
                            <div :class="`columns ${imageModel==='inactive'?'is-variable is-2':'is-variable is-1'} is-multiline has-width-${perRow}`">
                                <template v-if="imageModel==='inactive'">
                                    <div class="column" v-if="Object.keys(this.expData.bread).length > 0">
                                        <div class="columns is-variable is-1">
                                            <div class="column is-narrow">
                                                <figure class="image is-64x64"
                                                        v-on:click="dbClickItem({file_ext:null,hash:lastBreadcrumb.hash})"
                                                        v-html="getThum({file_ext:null,status:'back'})">
                                                </figure>
                                            </div>
                                            <div class="column item-title">
                                                <a href=""
                                                   @click.prevent="dbClickItem({file_ext:null,hash:lastBreadcrumb.hash})">Back</a>
                                                <small v-text="lastBreadcrumb.item_title"
                                                       class="has-text-grey-light is-block"></small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="column item-column"
                                         v-for="item in expData.expl.data">
                                        <div class="columns is-variable is-1">
                                            <div class="column is-narrow">
                                                <figure class="image is-64x64"
                                                        v-on:dblclick="dbClickItem(item)"
                                                        v-html="getThum(item)">
                                                </figure>
                                            </div>
                                            <div class="column item-title">
                                                <a href="" @click.prevent="clickItem(item,$event)"
                                                   v-text="item.item_title"></a>
                                                <small v-text="item.user.email"
                                                       class="has-text-grey-light is-block"></small>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                                <template v-else>
                                    <div class="column pb-1 pt-1 item-column"
                                         @click="clickItem(item,$event)"
                                         v-for="item in expData.expl.data">
                                        <lazy-img :imageSource="`/storage/180x150/fit/${item.path}`"></lazy-img>
                                        <!--<figure class="image" @click.prevent="clickItem(item,$event)"
                                                v-html="getThum(item,[180,150])">
                                        </figure>-->
                                    </div>
                                </template>
                            </div>
                        </div>
                        <div class="column is-narrow bg-light" v-show="selectItem.length >0">
                            <div id="fmg-right-col" style="width: 0;">
                                <div class="field is-grouped" v-if="!inTrash">
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-right is-primary is-outlined"
                                                data-tooltip="Cancel"
                                                type="button"
                                                @click.prevent="panelDetailRemoveSelect">
                                            <span class="icon"><i class="fa fa-close"></i> </span>
                                        </button>
                                    </p>
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-right is-danger is-outlined"
                                                data-tooltip="Delete"
                                                type="button"
                                                @click.prevent="panelDetailDelete">
                                            <span class="icon"><i class="fa fa-trash"></i> </span>
                                        </button>
                                    </p>
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-bottom is-success is-outlined"
                                                data-tooltip="Di chuyển đến..."
                                                type="button"
                                                @click.prevent="panelDetailMove">
                                            <span class="icon"><i class="fa fa-arrow-circle-o-right"></i> </span>
                                        </button>
                                    </p>
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-bottom is-info is-outlined"
                                                data-tooltip="Xem ảnh gốc"
                                                type="button"
                                                @click.prevent="panelDetailVieImage">
                                            <span class="icon"><i class="fa fa-eye"></i> </span>
                                        </button>
                                    </p>
                                </div>
                                <div class="field is-grouped" v-else>
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-bottom is-danger is-outlined"
                                                data-tooltip="Xóa vĩnh viễn"
                                                type="button"
                                                @click.prevent="panelDetailDeleteTrash">
                                            <span class="icon"><i class="fa fa-window-close"></i> </span>
                                        </button>
                                    </p>
                                    <p class="control is-expanded">
                                        <button class="button is-fullwidth tooltip is-tooltip-bottom is-info is-outlined"
                                                data-tooltip="Khôi phục lại"
                                                type="button"
                                                @click.prevent="panelDetailRestoreTrash">
                                            <span class="icon"><i class="fa fa-share"></i> </span>
                                        </button>
                                    </p>
                                </div>

                                <carousel ref="flickity_pick">
                                    <div v-for="(item,index) in detailData"
                                         class="carousel-cell">
                                        <figure class="image is-256x256"
                                                v-html="getThum(item,[256,256])">
                                        </figure>
                                        <a class="is-block has-text-small" href=""
                                           @click.prevent="panelDetail.showMoreEdit = !panelDetail.showMoreEdit; $refs.flickity_pick.resize()">
                                            Show/Hide edit...</a>
                                        <template v-if="panelDetail.showMoreEdit">
                                            <div class="field">
                                                <label class="label is-small">Title</label>
                                                <div class="control">
                                                    <input class="input is-small" v-model="item.item_title"
                                                           placeholder="Enter file title">
                                                </div>
                                            </div>
                                            <div class="field">
                                                <label class="label is-small">Description</label>
                                                <div class="control">
                                                    <input class="input is-small" v-model="item.description"
                                                           placeholder="Enter file description">
                                                </div>
                                            </div>
                                        </template>

                                        <a class="is-block has-text-small" href=""
                                           @click.prevent="panelDetail.showMoreDetail = !panelDetail.showMoreDetail; $refs.flickity_pick.resize()">
                                            Show/Hide more...</a>
                                        <div class="field" v-if="panelDetail.showMoreDetail">
                                            <p class="has-text-small">
                                                <strong>Owner:</strong> <span v-text="item.user.email"></span><br/>
                                                <strong>Created:</strong> <span
                                                    v-text="item.created_at"></span><br/>
                                                <strong>Updated:</strong> <span
                                                    v-text="item.updated_at"></span><br/>
                                                <strong>Size:</strong> <span
                                                    v-text="humanFileSize(item.size)"></span><br/>
                                            </p>
                                        </div>
                                    </div>
                                </carousel>
                                <div class="field is-grouped mt-4">
                                    <div class="control is-expanded" v-if="pickFile && !inTrash">
                                        <button class="button is-info is-fullwidth"
                                                @click.prevent="clickPickFile">Pick File
                                        </button>
                                    </div>
                                    <div class="control is-expanded" v-if="panelDetail.showMoreEdit">
                                        <button class="button is-primary is-fullwidth" type="button"
                                                @click.prevent="panelDetailSave">
                                            <span class="icon"><i class="fa fa-save"></i> </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="column is-narrow bg-dark" v-show="panelAction.open">
                            <div style="width: 0" id="fmg-panel-action">
                                <aside class="menu">
                                    <p class="menu-label" v-text="panelAction.title"></p>
                                    <ul class="menu-list">
                                        <li>
                                            <a @click.prevent="panelActionSelected('', $event)">...</a>
                                        </li>
                                        <li v-for="list in panelAction.list">
                                            <a @click.prevent="panelActionSelected(list, $event)">{{writeDepth(list.depth,
                                                '&#8212;')}} {{list.item_title}}</a>
                                        </li>
                                    </ul>
                                </aside>
                                <div class="field is-grouped">
                                    <div class="control">
                                        <button v-if="panelAction.selected !==''"
                                                @click="panelActionConfirm"
                                                type="button" class="button is-success">
                                            <span class="icon"><i class="fa fa-check"></i> </span>
                                        </button>
                                    </div>
                                    <div class="control is-expanded">
                                        <button type="button" class="button is-fullwidth is-info is-outlined"
                                                @click="panelActionCancel">
                                            Hủy lệnh
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--Modal New and  item-->
                    <div :class="{'modal':true,'is-active':modal.show}">
                        <div class="modal-background"></div>
                        <div class="modal-card" id="modal-item">
                            <header class="modal-card-head">
                                <p class="modal-card-title">
                                    {{modal.title}}
                                    <span class="has-text-small"> (nhấn ESC để thoát)</span>
                                </p>
                                <button class="delete"
                                        aria-label="close"
                                        @click="modal.show = false"></button>
                            </header>
                            <section class="modal-card-body">
                                <template v-if="modal.action === 'newFolder'">
                                    <div class="field">
                                        <label class="label" for="input-link-title">Title</label>
                                        <p class="control">
                                            <input class="input" id="input-link-title"
                                                   @keyup.enter="saveModal"
                                                   v-model="modal.data.item_title">
                                        </p>
                                    </div>
                                    <div class="field">
                                        <label class="label" for="input-description">Description</label>
                                        <p class="control">
                                            <input class="input" id="input-description"
                                                   @keyup.enter="saveModal"
                                                   v-model="modal.data.description">
                                        </p>
                                    </div>
                                </template>
                            </section>
                            <footer class="modal-card-foot">
                                <button class="button is-success" @click="saveModal">OK</button>
                                <button class="button" @click="modal.show = false">Cancel</button>
                            </footer>
                        </div>
                    </div>

                    <div class="modal is-active" v-show="fullImage.show">
                        <div class="modal-background"></div>
                        <div class="modal-content column is-12">
                            <div class="has-relative">
                                <carousel ref="flickity_pick_view">
                                    <div v-for="img in selectItem" class="carousel-cell">
                                        <img :src="`/storage/action/view/${img}`"/>
                                    </div>
                                </carousel>
                            </div>
                        </div>
                        <button class="modal-close is-large"
                                @click="fullImage.show = false"
                                aria-label="close"></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>
<script>
    import itemView from './include/item-view'

    import {Tabs, TabPane} from './tabs'
    import PerfectScrollbar from "perfect-scrollbar";
    import LazyImg from "./include/LazyImg";

    export default {
        name: 'mediaManager',
        components: {
            LazyImg,
            Tabs,
            TabPane
        },
        props: {
            fileType: {
                type: String,
                default: () => {
                    return '*'
                }
            },
            pickFile: {
                type: [String, Boolean],
                default: false
            },
            onPickFile: {
                type: Function,
                default: () => {
                }
            }
        },
        data: function () {
            return {
                $_parent_: null,
                inTrash: false,
                showBtn: {
                    upload: true,
                    do_upload: false,
                    del_upload: false,
                    add_new: true,
                    zip: false,
                    unzip: false
                },
                formUpload: {
                    show: false,
                    begin_upload: false,
                    data: [],
                    isFile: false,
                    percentCompleted: 0,
                    cancelToken: null,
                    info: '',
                    do_upload: {
                        css_class: 'button is-info',
                        text: 'Do upload'
                    }
                },
                filter: {
                    show: false,
                    data: {
                        size: [0, 0],
                        file_type: '',
                        file_ext: '',
                        user_id: '',
                        date_range: ''
                    }
                },
                modal: {
                    show: false,
                    action: String,
                    data: {
                        item_title: '',
                        file_name: '',
                        file_type: '',
                        file_ext: '',
                        description: '',
                        password: ''
                    },
                },
                maxSize: 100,
                users: [],
                current: [],
                selectItem: [],
                expData: {
                    expl: [],
                    bread: []
                },
                pickData: [],
                perRow: 5,
                panelAction: {
                    title: String,
                    action: 'copy',
                    open: false,
                    list: [],
                    selected: String
                },
                panelDetail: {
                    showMoreDetail: false,
                    showMoreEdit: false,
                    paddingTop: 0
                },
                imageModel: 'active',
                fullImage: {
                    show: false
                }
            }
        },
        created() {
            if (this.pickFile) {
                let $parent = this.$parent
                if (!$parent) {
                    let parent = document.querySelector('.file-manager-group')
                    if (!parent) {
                        const className = 'file-manager-group'
                        const FilePicker = Vue.extend({
                            name: 'FilePicker',
                            render(h) {
                                return h('div', {
                                    'class': {
                                        [`${className}`]: true
                                    }
                                })
                            }
                        })
                        $parent = new FilePicker().$mount()
                        document.body.appendChild($parent.$el)
                    } else {
                        $parent = parent.__vue__
                    }
                    // Hacked.
                    this.$_parent_ = $parent
                }
            }
        },
        mounted() {
            window.addEventListener('keyup', (event) => {
                if (event.key === 'Insert') {
                    this.modal.show = true
                }

                if (event.key === 'Escape') {
                    if (this.modal.show)
                        this.modal.show = false
                }
            });

            if (this.pickFile) {
                if (this.$_parent_) {
                    this.$_parent_.$el.appendChild(this.$el)
                    this.$parent = this.$_parent_
                    delete this.$_parent_
                }
            }
            let globalFmg = this.$el.querySelector('.global-fmg-content');
            let height = isNaN(window.innerHeight) ? window.clientHeight : window.innerHeight
            window.TweenMax.to(globalFmg, 0.5, {height: height - 160})
            //set upload content height
            let upload_content = this.$el.querySelector('.fmg-upload-content')
            upload_content.style.maxHeight = height - 300 + 'px'
            new PerfectScrollbar(upload_content, {
                minScrollbarLength: 50,
                suppressScrollX: true
            });

            new PerfectScrollbar(globalFmg, {
                minScrollbarLength: 50,
                suppressScrollX: true
            });

            globalFmg.addEventListener('ps-y-reach-end', () => {
                if (this.expData.expl.hasOwnProperty('next_page_url'))
                    if (this.expData.expl.next_page_url !== null)
                        this.expLoadItem(this.current, true)
            });

            globalFmg.addEventListener('ps-scroll-y', () => {
                this.panelDetail.paddingTop = globalFmg.scrollTop
                this.$el.querySelector('#fmg-right-col').style.paddingTop = globalFmg.scrollTop + 'px'
            });

            this.expLoadItem({hash: ''})
        },
        destroyed() {
            if (this.pickFile) {
                this.$el.remove()
                document.querySelector('.file-manager-group').remove()
            }
        },
        computed: {
            lastBreadcrumb() {
                let data = []
                if (_.size(this.expData.bread) > 1) {
                    data = this.expData.bread[_.size(this.expData.bread) - 2]
                } else {
                    data = {hash: '', item_title: 'Root'}
                }
                return data
            },
            filterDateConfig() {
                return {
//                    enableTime: true,
                    dateFormat: 'Y-m-d',
                    mode: "range"
                }
            },
            detailData() {
                return _.filter(this.expData.expl.data, (o) => {
                    return this.selectItem.indexOf(o.hash) > -1
                })
            }
        },
        watch: {
            'formUpload.percentCompleted': function (value) {
                if (value === 100) {
                    this.showBtn.del_upload = false
                    this.formUpload.do_upload.css_class = 'button is-success'
                    this.formUpload.do_upload.text = 'Đang xác thực, vui lòng đợi...'
                } else if (value < 100 && this.formUpload.begin_upload) {
                    this.formUpload.do_upload.css_class = 'button is-info is-loading'
                    this.formUpload.do_upload.text = 'Đang tải lên...'
                } else {
                    this.formUpload.do_upload.css_class = 'button is-info'
                    this.formUpload.do_upload.text = 'Bắt đầu tải lên'
                }
            },
            'formUpload.begin_upload': function (value) {
                if (value) {
                    //hide button action
                    this.showBtn.upload = false
                    this.showBtn.del_upload = false
                    this.showBtn.add_new = false
                } else {
                    this.formUpload.do_upload.css_class = 'button is-info'
                    this.formUpload.do_upload.text = 'Do upload'
                }
            },
            'formUpload.data': function (value) {
                if (_.size(value) > 0) {
                    this.showBtn.do_upload = true
                    this.showBtn.del_upload = true
                    this.formUpload.isFile = true
                } else {
                    this.showBtn.do_upload = false
                    this.showBtn.del_upload = false
                    this.formUpload.isFile = false
                }
            },
            'modal.show': function (value) {
                if (this.modal.action === 'editFolder')
                    this.modal.title = 'Đổi tên'
                else if (this.modal.action === 'newFolder')
                    this.modal.title = 'Cặp mới'
                else
                    this.modal.title = ''

                if (value) {
                    let el = this.$el.querySelector('#modal-item');
                    window.TweenMax.fromTo(el, 0.3, {scale: 0}, {
                        scale: 1.2, onComplete: () => {
                            window.TweenMax.to(el, 0.3, {scale: 1})
                            this.$el.querySelector('#input-link-title').focus()
                        }
                    })
                }
            },
            imageModel: function (value) {
                this.panelDetailRemoveSelect()
                this.expLoadItem({hash: ''})
            }
        },
        methods: {
            writeDepth(number, str) {
                return str.repeat(number) + ' '
            },
            closedByUser() {
                if (this.pickFile) {
                    this.$emit('closed-by-user')
                    this.$destroy()
                }
            },
            close() {
                if (this.pickFile) {
                    this.$emit('closed-automatically')
                    this.$destroy()
                }
            },
            humanFileSize(size) {
                let i = Math.floor(Math.log(size) / Math.log(1024));
                return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]
            },
            fileSizeValue(size) {
                let i = Math.floor(Math.log(size) / Math.log(1024));
                return (size / Math.pow(1024, i)).toFixed(2) * 1
            },
            fileSizeType(size) {
                let i = Math.floor(Math.log(size) / Math.log(1024));
                return ['B', 'kB', 'MB', 'GB', 'TB'][i]
            },
            updateFilterSlider(val) {
                this.filterData.size = val
            },

            rightNavFilter() {
                this.filter.show = !this.filter.show
                if (this.filter.show) {
                    window.preloader.active(true)
                    axios.post('/storage/fmg/filter').then(res => {
                        this.users = res.data.user
                        this.maxSize = res.data.size * 1
                        this.filter.data.size = [0, this.fileSizeValue(res.data.size)]
                        window.preloader.active(false)
                    })
                }
            },
            rightNavDoFilter() {
                this.expLoadItem({hash: ''})
            },
            rightNavTrash() {
                this.inTrash = true;
                window.preloader.active(true);
                axios.post('/storage/fmg/load', {trash: true})
                    .then((res) => {
                        this.$set(this.expData, 'expl', res.data.expl)
                        this.$set(this.expData, 'bread', res.data.br)
                        window.preloader.active(false);
                    }).catch((err) => {
                    window.preloader.active(false);
                })
            },
            rightNavUpload() {
                let el_upload = this.$el.querySelector('.fmg-upload')
                if (this.formUpload.show) {
                    window.TweenMax.to(el_upload, 0.3, {
                        height: 0, padding: '0', onComplete: () => {
                            this.formUpload.show = false
                        }
                    })
                } else {
                    this.formUpload.show = true
                    window.TweenMax.to(el_upload, 0.3, {height: 'auto', padding: '7px'})
                }
            },
            rightNavZip() {

            },
            rightNavUnzip() {

            },

            panelActionList() {
                this.panelAction.title = 'Đang lấy danh sách thư mục...'
                window.axios.post('/storage/fmg/action/list')
                    .then(res => {
                        this.panelAction.list = res.data
                        if (this.panelAction.action === 'copy')
                            this.panelAction.title = 'Chọn thư mục muốn sao chép vào'
                        if (this.panelAction.action === 'move')
                            this.panelAction.title = 'Chọn thư mục muốn di chuyển đến'
                    })
                    .catch(err => {
                        window.Notifi({
                            type: 'warning',
                            message: err.message
                        })
                        this.panelAction.title = 'Lỗi, nhấn F5 để thử lại.'
                    })
            },
            panelActionSelected(list, event) {
                this.panelAction.selected = typeof list.hash === 'undefined' ? null : list.hash
                _.forEach(event.currentTarget.closest('ul').getElementsByTagName('a'), (el) => {
                    el.classList.remove('is-active')
                })
                event.currentTarget.classList.add('is-active')
            },
            panelActionOpen() {
                if (!this.panelAction.open) {
                    if (this.perRow > 1)
                        this.perRow -= 1;
                    this.panelAction.open = true
                    let el = this.$el.querySelector('#fmg-panel-action')
                    window.TweenMax.to(el, 0.3, {width: 230})
                }
            },
            panelActionCancel() {
                if (this.panelAction.open) {
                    if (this.perRow < 6)
                        this.perRow += 1
                    let el = this.$el.querySelector('#fmg-panel-action')
                    window.TweenMax.to(el, 0.3, {
                        width: 0, onComplete: () => {
                            this.panelAction.open = false
                            this.panelAction.selected = ''
                        }
                    })
                }
            },
            panelActionConfirm() {
                window.preloader.active(true)
                if (this.panelAction.action === 'move') {
                    axios.post('/storage/fmg/action/move', {from: this.selectItem, to: this.panelAction.selected})
                        .then(() => {
                            window.preloader.active(false)
                            this.panelActionCancel()
                            this.expLoadItem(this.current)
                        })
                        .catch(() => {
                            window.preloader.active(false)
                            window.Notifi({
                                type: 'warning',
                                message: 'Có lỗi, nhấn F5 để thử lại.'
                            })
                        })
                }
            },
            panelDetailRemoveSelect() {
                let rightCol = this.$el.querySelector('#fmg-right-col')
                _.forEach(this.$el.querySelectorAll('.item-column'), (el) => {
                    el.classList.remove('has-item-select')
                })

                this.panelActionCancel()
                window.TweenMax.to(rightCol, 0.3, {
                    width: 0, onComplete: () => {
                        this.selectItem = []
                    }
                })
            },
            panelDetailDelete() {
                let msg = ''
                _.forEach(this.detailData, function (o, i) {
                    msg += `<strong>${i + 1}:</strong> <em>${o.item_title}</em><br/>`
                })
                window.Message({
                    type: 'danger',
                    title: 'Xác nhận xóa',
                    message: `Những mục sau sẽ được xóa: <br/>${msg}<br/>Bạn vẫn có thể vào thùng rác để lấy lại những mục đã xóa, nó sẽ lưu lại 90 ngày kể từ khi được xóa.`,
                    showConfirm: true,
                    onConfirm: (msg) => {
                        axios.delete('/storage/fmg/delete', {data: this.selectItem})
                            .then(() => {
                                //update expl data
                                this.expData.expl.data = _.filter(this.expData.expl.data, (o) => {
                                    return this.selectItem.indexOf(o.hash) === -1
                                })
                                //remove select item
                                this.selectItem = []
                                msg.close()
                            })
                    }
                })
            },

            panelDetailMove() {
                this.panelActionOpen()
                this.panelAction.action = 'move'
                this.panelActionList()
            },
            panelDetailVieImage() {
                this.fullImage.show = true
                this.$nextTick(() => {
                    this.$refs.flickity_pick_view.rerender()
                })
            },
            panelDetailSave() {
                let data = _.filter(this.expData.expl.data, (o) => {
                    return this.selectItem.indexOf(o.hash) > -1
                })

                axios.post('/storage/fmg/detail', {data: data})
                    .then(res => {
                        window.Notifi({
                            message: 'Đã lưu thay đổi'
                        })
                    })
                    .catch(err => {
                        window.Notifi({
                            type: 'warning',
                            message: 'Có lỗi, không lưu được. Nhấn F5 để thử lại.'
                        })
                    })
            },
            panelDetailDeleteTrash() {
                axios.post('/storage/fmg/destroy', this.selectItem)
                    .then(res => {
                        //update expl data
                        this.expData.expl.data = _.filter(this.expData.expl.data, (o) => {
                            return this.selectItem.indexOf(o.hash) === -1
                        })
                        //remove select item
                        this.selectItem = []

                        window.Notifi({
                            message: 'Các mục sau đã được xóa vĩnh viễn: ' + res.data
                        })
                    })
            },
            panelDetailRestoreTrash() {
                axios.post('/storage/fmg/restore', this.selectItem)
                    .then(res => {
                        //update expl data
                        this.expData.expl.data = _.filter(this.expData.expl.data, (o) => {
                            return this.selectItem.indexOf(o.hash) === -1
                        })
                        //remove select item
                        this.selectItem = []

                        window.Notifi({
                            message: 'Đã khôi phục ' + res.data
                        })
                    })
            },

            clickItem(item, event) {
                let rightCol = this.$el.querySelector('#fmg-right-col')

                let target = event.target.closest('.item-column')
                /*if (this.imageModel === 'active')
                    target = event.target*/
                if (event.ctrlKey) {
                    target.classList.toggle('has-item-select')
                    if (this.selectItem.indexOf(item.hash) > -1)
                        _.pull(this.selectItem, item.hash)
                    else
                        this.selectItem.push(item.hash)
                } else {
                    _.forEach(this.$el.querySelectorAll('.item-column'), (el) => {
                        el.classList.remove('has-item-select')
                    })
                    if (this.selectItem.indexOf(item.hash) === -1) {
                        target.classList.add('has-item-select')
                        this.selectItem = [item.hash]
                    } else {
                        target.classList.remove('has-item-select')
                        this.panelActionCancel()
                        window.TweenMax.to(rightCol, 0.3, {
                            width: 0, onComplete: () => {
                                this.selectItem = []
                            }
                        })
                    }
                }

                if (this.selectItem.length > 0) {
                    if (rightCol.style.width !== '270px')
                        window.TweenMax.to(rightCol, 0.3, {width: 270, 'padding-top': this.panelDetail.paddingTop})
                    this.$refs.flickity_pick.rerender()
                } else {
                    this.panelActionCancel()
                }
            },
            dbClickItem(item) {
                if (item.file_ext === null && !this.inTrash) {
                    //set current path
                    this.current = item

                    this.expLoadItem(item)
                }
            },
            expLoadItem(item, next = false) {
                window.preloader.active(true);
                let page = 1;
                if (next && this.expData.expl.hasOwnProperty('next_page_url'))
                    page = new URL(this.expData.expl.next_page_url).searchParams.get('page')

                if (this.imageModel === 'active') {
                    let data = []
                    this.current = []
                    if (next) {
                        data = {page: page, image: 'active'}
                        if (this.filter.show) {
                            data = {page: page, image: 'active', filter: this.filter.data}
                        }
                    } else {
                        data = {image: 'active'}
                        if (this.filter.show) {
                            data = {image: 'active', filter: this.filter.data}
                        }
                    }

                    axios.post('/storage/fmg/load', data)
                        .then((res) => {
                            let new_data = []
                            if (next) {
                                new_data = res.data.expl
                                new_data.data = _.concat(this.expData.expl.data, res.data.expl.data)
                            } else
                                new_data = res.data.expl

                            this.expData.expl = new_data
                            this.expData.bread = res.data.br
                            window.preloader.active(false);
                        })
                        .catch((err) => {
                            window.preloader.active(false);
                            window.Notifi({
                                type: 'warning',
                                title: 'Có lỗi',
                                message: 'Đã xảy ra sự cố, nhần F5 để thử lại.\n' + err.message
                            })
                        })
                } else {
                    let hash = this.current.hasOwnProperty('hash') ? this.current.hash : ''
                    let data = []
                    if (next) {
                        data = {page: page, hash: hash}
                        if (this.filter.show) {
                            data = {page: page, hash: hash, filter: this.filter.data}
                        }
                    } else {
                        data = {hash: hash}
                        if (this.filter.show) {
                            data = {hash: hash, filter: this.filter.data}
                        }
                    }
                    axios.post('/storage/fmg/load', data)
                        .then((res) => {
                            let new_data = []
                            if (next) {
                                new_data = res.data.expl
                                new_data.data = _.concat(this.expData.expl.data, res.data.expl.data)
                            } else
                                new_data = res.data.expl

                            this.expData.expl = new_data
                            this.expData.bread = res.data.br
                            window.preloader.active(false);
                        })
                        .catch((err) => {
                            window.preloader.active(false);
                            window.Notifi({
                                type: 'warning',
                                title: 'Có lỗi',
                                message: 'Đã xảy ra sự cố, nhần F5 để thử lại.\n' + err.message
                            })
                        })
                }
            },
            saveModal() {
                if (this.modal.action === 'newFolder') {
                    let hashCurrent = typeof this.current.hash !== 'undefined' ? this.current.hash : ''
                    axios.post('/storage/fmg/create/dir',
                        {
                            item_title: this.modal.data.item_title,
                            description: this.modal.data.description,
                            hash: hashCurrent
                        })
                        .then(() => {
                            this.expLoadItem(this.current)
                            this.modal.show = false
                        })
                        .catch((err) => {
                            window.Message({
                                title: 'Error',
                                message: err.response.data.message,
                                type: 'warning'
                            })
                        })
                }
            },
            getThum(item, size = [64, 64]) {
                if (item.file_ext === null) {
                    return itemView.folderThum(item.status)
                } else {
                    return itemView.fileThum(item.file_ext, item.hash, size)
                }
            },
            imageViewSrc(value) {
                return URL.createObjectURL(value)
            },
            resetUpload() {
                //stop upload
                this.formUpload.begin_upload = false
                // set percentCompleted to 0
                this.formUpload.percentCompleted = 0
                //show upload button
                this.showBtn.upload = true
                //show add new button
                this.showBtn.add_new = true
                //remove upload data
                this.formUpload.data = []
                //hide do upload button
                this.showBtn.do_upload = false
                //hide deleted button
                this.showBtn.deleted = false
                //hide del_upload button
                this.showBtn.del_upload = false

                this.formUpload.info = ''
            },
            previewThumbnail() {
                let uploads = this.$refs.file_input.files
                for (let value of uploads) {
                    this.formUpload.data.push(value)
                }
            },
            deleteThumbnail(index) {
                this.formUpload.data.splice(index, 1)
            },
            doUpload() {
                if (!this.formUpload.begin_upload) {
                    //start upload
                    this.formUpload.begin_upload = true

                    let CancelToken = axios.CancelToken
                    this.formUpload.cancelToken = CancelToken.source()

                    let config = {
                        onUploadProgress: (progressEvent) => {
                            this.formUpload.percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)
                        },
                        cancelToken: this.formUpload.cancelToken.token
                    }

                    let data = new FormData()

                    _.forEach(this.formUpload.data, (value) => {
                        data.append('uploads[]', value)
                    })

                    if (typeof this.current.hash !== 'undefined')
                        data.append('hash', this.current.hash);

                    data.append('image', this.imageModel)

                    axios.post('/storage/fmg/upload', data, config)
                        .then((res) => {
                            if (typeof res.data.message !== 'undefined') {
                                this.formUpload.info = res.data.message
                            } else {
                                this.formUpload.info = '<span class="has-text-success">Success</span>'
                            }
                            //reset form upload
                            this.resetUpload()

                            //update list
                            this.expLoadItem(this.current)
                        })
                        .catch((err) => {
                            //stop upload
                            this.formUpload.begin_upload = false
                            this.showBtn.del_upload = true
                            if (typeof err.response.data.message !== 'undefined') {
                                this.formUpload.info = `<span class="has-text-danger">${err.response.data.message}</span>`
                            } else {
                                this.formUpload.info = '<span class="has-text-danger">Error</span>'
                            }
                        })
                }
            },
            cancelUpload() {
                //stop upload
                this.formUpload.cancelToken.cancel()
                this.formUpload.begin_upload = false
            },
            delUpload() {
                this.resetUpload()
            },
            hasImage(ext) {
                return ['png', 'jpg', 'jpeg', 'gif'].indexOf(ext) > -1;
            },
            clickPickFile() {
                let data = _.filter(this.expData.expl.data, (o) => {
                    return this.selectItem.indexOf(o.hash) > -1
                })
                this.onPickFile(data)
                this.close()
            }
        }
    }
</script>